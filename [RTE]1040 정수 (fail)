#include <bits/stdc++.h>
//#include <string.h>
char a[20];
char temp[20];
int n;
int k;

int getRecNumber(char a[20], int k) {
	int mask = 0;
	for (int i = 0; i <= k; i++)
		if (a[i] != '*')
			mask |= (1 << (a[i] - '0'));
	return mask;
}
int getMinWithMask(char a[20], int k) {
	int mask = getRecNumber(a, k);
	for (int i = 0; i <= 9; i++) {
		if (mask & (1 << i)) {
			return i;
		}
	}
}
int getMinWithoutMask(char a[20], int k, int base) {
	int mask = getRecNumber(a, k);
	for (int i = base-'0' + 1; i <= 9; i++) {
		if (~mask & (1 << i)) {
			return i;
		}
	}
	return -1;
}
// myk > k
int checkSuccess(char a[20], int k, int base) {
	int mask = getRecNumber(a, k);
	// base보다 큰 값이 존재하는지 확인
	for (int i = base-'0' + 1; i <= 9; i++) {
		if (mask & (1 << i)) {
			return i;
		}
	}
	return -1;
}
int getKnumber(int mask) {
	int res = 0;
	for (int i = 0; i <= 9; i++)
	{
		if (mask & (1 << i))
			res++;
	}
	return res;
}
// myk > k
int recul(int cur) { // cur => current cur-1 => remain Array
	// a[cur] = *를 가정
	int myk;
	if (cur == 0) {
		a[0] = '1';
		return 1;
	}

	if (a[cur] != '*') {
		myk = getKnumber(getRecNumber(a, cur - 1));
		if (myk == k) {
			// base 보다 크면서 같은 값을 가지는지 확인,
			int val = checkSuccess(a, cur - 1, a[cur]);
			if (val > 0) {
				a[cur] = val + '0';
				return 1;
			}
		}
		else if (myk < k) {
			// n-cur+1 남은 master key < k-myk이면, 
			if (a[cur] != '9' && n - cur + 1 >= (k - myk)) {
				// 되는 것 중의 최소 값.
				if (n - cur + 1 >(k - myk)) { // 여유가 있으면
					a[cur] = a[cur] + 1;
					return 1;
				}
				else { //여유가 없으면
					   // 그중 최소
					a[cur] = getMinWithoutMask(a, cur - 1, a[cur]) + '0';
					if(a[cur]!=-1+'0')
						return 1;
				}
			}
		}

	}
	recul(cur - 1);

	myk = getKnumber(getRecNumber(a, cur - 1));
	// 되는 것 중의 최소 값.
	if (n - cur + 1 > (k - myk) && (k-myk) !=0) { // 여유가 있으면
		a[cur] = '0';
		return 1;
	}
	else if (k - myk == 0) {
		a[cur] = getMinWithMask(a, cur - 1) + '0';
		return 1;
	}
	else { //여유가 없으면
		   // 그중 최소
		a[cur] = getMinWithoutMask(a, cur - 1, '0'-1) + '0';
		return 1;
	}
}
int main(){
	a[0] = '*';
	scanf("%s %d", a + 1, &k);
	n = strlen(a) - 1;

	if (n < k) {
		for (int i = 1; i <= n; i++)
			a[i + (k - n - 1)] = a[i];
		for (int i = 1; i <= (k - n - 1); i++) {
			a[i] = '*';
		}
		n = k-1;
	}
	//Case k == myK -> Success
	int myk = getKnumber(getRecNumber(a, n));
	if (myk == k) {
		printf("%s\n", a + 1); return 1;
	}
	//바꾸지 않고 처리할 수 없음을 보장
	recul(n);
	if (a[0] == '*'){
      printf("%s", a + 1);
  }else printf("%s", a);
  
  return 0;
}
