#include <bits/stdc++.h>
#define MAX 1000
int G[MAX+5][MAX+5];
//int vt[MAX+5][MAX+5];
//char G[MAX+5][MAX+5];
int vt[MAX+5];
int n;
int k;
int st,ed; ///시작점과 끝
int R[MAX+5];
int ans[MAX+5]; ///result
int count_=0;
int flag=0; ///도착했는지의 여부 -> st==ed
struct tuple_{ ///구조체로 안잡고 하다 답이 안나와서 구조체로 잡아버림
    char L[30+5]; ///길이
    int save; ///임시 저장
};
tuple_ A[MAX+5];

void input(){
    int i,j;
    //freopen("in.txt","r",stdin);
    scanf("%d %d",&n,&k);
    for(i=1;i<=n;i++){
        scanf("%s",A[i].L);
    }
    for(i=1;i<=n;i++){
        A[i].save=i;
    }
    scanf("%d %d",&st,&ed);
}
void G_print(){
    int i,j;
    for(i=1;i<=n;i++){
        for(j=1;j<=n;j++){
            printf("%d ",G[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}
void print(){
    int i,j;
    if(flag==1){ ///경로가 존재할 때
        for(i=0;i<count_;i++){
            printf("%d ",ans[i]);
        }
        printf("\n");
    }else if(flag==0){ ///경로 존재 X
        printf("-1\n");
    }
}
int check(int a, int b){ ///해밍경로 1
    int i,j;
    int c=0;
    for(i=0;i<k;i++){
        if(A[a].L[i]==A[b].L[i]){
            c++;
        }
    }
    if(c+1==k){ ///c+1로 해야함
        return 1;
    }else return 0;
}
/*
void back_(int t){
    int i;
    if(flag==1){ ///역추적
        t=ed;
        while(t!=0){
            tr[path++]=t;
            t=R[t];
        }
        for(i=path-1;i>=0;i--){
            ans[count_++]=tr[i];
        }
    }
}
*/
void bfs(){
    int q[MAX+5];
    int i,j;
    int f=0;
    int r=0;
    int tr[MAX+5]={0,}; ///trade 배열
    int path=0; ///path -> count
    for(i=1;i<=n;i++){
        vt[i]=0;
        R[i]=0;
    }
    vt[st]=1;
    q[r++]=st;
    int t;
    do{
        t=q[f++];
        if(t==ed){
            flag=1;
            break;
        }
        for(i=1;i<=n;i++){
            if(G[t][i]==1 && vt[i]==0){
                R[i]=t;
                q[r++]=i;
                vt[i]=1;
            }
        }
    }while(f!=r);

    
    //back_(t);
    if(flag==1){ ///역추적
        t=ed;
        while(t!=0){
            tr[path++]=t;
            t=R[t];
        }
        for(i=path-1;i>=0;i--){
            ans[count_++]=tr[i];
        }
    }
}

/*
void bfs(int s, int e){ ///실패한 쓰레기 bfs
    int vt[MAX+5]={0,};
    int q[MAX+5];
    int i,j;
    int f=0;
    int r=0;
    int tr[MAX+5]={0,};
    int path=0;
    int t;
    vt[s]=1;
    q[r++]=s;
    do{
        int c=0;
        s=q[f++];
        for(i=1;i<=n;i++){
            if(G[s][i]==1 && vt[i]==0){
                vt[i]=1;
                tr[i]=s;
                if(i==e){
                    t=i;
                    while(t!=0){
                        ans[count_]=t;
                        t=tr[t];
                        count_++;
                    }
                    for(j=count_-1;j>=0;j--){
                        printf("%d ",ans[j]);
                    }
                    return;
                }
                q[r++]=i;
            }else{
                c++;
            }
        }
    }while(f!=r);
    printf("-1\n");
}
*/

int main(){
    input(); ///입력
    int i,j;
    //int cnt=0;
    for(i=1;i<=n;i++){
        for(j=i+1;j<=n;j++){ ///j+1 로 해야함 j~~(x)
            if(check(i,j)==1){
                G[A[i].save][A[j].save]=1;
                G[A[j].save][A[i].save]=1;
            }
        }
    }
    //G_print(); ///인접행렬 출력
    bfs(); ///이미 st,ed 를 받았으므로 그냥 bfs 돌리면 된다
    print(); ///출력
    return 0;
}
