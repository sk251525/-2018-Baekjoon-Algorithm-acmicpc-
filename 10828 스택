#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct tagStack {
	int count;
	int* stack;
}_Stack;

void CreateStack(_Stack** Stack);
void DestroyStack(_Stack* Stack);
void Push(_Stack* Stack, int NewData);
int Pop(_Stack* Stack);
int GetSize(_Stack* Stack);
int IsEmpty(_Stack* Stack);
int Top(_Stack* Stack);

int main(void) {
	_Stack* Stack;
	int TestCase;
	int output;
	int data;
	char Type[5+3];

	CreateStack(&Stack);
	scanf("%d", &TestCase);
	for (int i = 0; i < TestCase; i++) {
		scanf("%s", Type, 5);
		if (!strcmp(Type, "push")) {

			scanf("%d", &data);
			Push(Stack, data);
			continue;
		}

		else if (!strcmp(Type, "pop"))
			output = Pop(Stack);

		else if (!strcmp(Type, "size"))
			output = GetSize(Stack);
		else if (!strcmp(Type, "empty"))
			output = IsEmpty(Stack);
		else
			output = Top(Stack);

		printf("%d\n", output);
	}
	DestroyStack(Stack);

	return 0;

}

void CreateStack(_Stack **Stack) {
	(*Stack) = (_Stack*)malloc(sizeof(_Stack));

	(*Stack)->count = 0;
	(*Stack)->stack = (int*)calloc(10000 ,sizeof(int));
}

void DestroyStack(_Stack *Stack) {
	free(Stack->stack);
	free(Stack);
}
void Push(_Stack *Stack, int newData) {
	int ad = Stack->count;
	Stack->stack[ad] = newData;
	Stack->count++;
}

int Pop(_Stack* Stack) {
	if (IsEmpty(Stack)) /* 스택이 비어 있음 */
		return -1;

	else {
		int result = Top(Stack);
		Stack->count--;
		return result;
	}
}

int IsEmpty(_Stack* Stack) {
	return (Stack->count == 0);
}
int GetSize(_Stack* Stack) {
	return Stack->count;
}
int Top(_Stack* Stack) {
	int ad = Stack->count - 1;
	if (ad == -1)
		return -1;
	return Stack->stack[ad];
}
