#include <bits/stdc++.h>
#define MAX 100
int C[MAX+5][MAX+5]; ///기존 치즈 저장
int vt[MAX+5][MAX+5];
int n;
int e;
int A[MAX+5][MAX+5]; ///한 시간 후 녹인 치즈를 저장
struct tuple_{
    int x,y;
};
tuple_ q[MAX*MAX+5];
tuple_ save;
void input(){
    int i,j;
    //freopen("in.txt","r",stdin);
    scanf("%d %d",&n,&e);
    for(i=0;i<n;i++){
        for(j=0;j<e;j++){
            scanf("%d",&C[i][j]);
        }
    }
}
void check(){
    int i,j;
    for(i=0;i<n;i++){
        for(j=0;j<e;j++){
            if(C[i][j]==1){
                if(A[i+1][j]==1 || A[i-1][j]==1 || A[i][j+1]==1 || A[i][j-1]==1){ ///상하좌우에 치즈가 있는지 확인
                    C[i][j]=0; ///있으면 녹는걸로 처리
                }
            }
        }
    }
}
void print(){
    int i,j;
    for(i=0;i<n;i++){
        for(j=0;j<e;j++){
            printf("%d ",C[i][j]);
        }
        printf("\n");
    }
    printf("\n\n");
}
void q_print(){
    int i;
    for(i=0;i<n;i++){
        printf("x: %d, y: %d\n",q[i].x,q[i].y);
    }
}
int C_check(){
    int i,j;
    int a=0;
    for(i=0;i<n;i++){
        for(j=0;j<e;j++){
            a+=C[i][j];
        }
    }
    return a;
}
void tr(){
    int i,j;
    for(i=0;i<n;i++){
        for(j=0;j<e;j++){
            A[i][j]=C[i][j];
        }
    }
}
void tr2(){
    int i,j;
    for(i=0;i<n;i++){
        for(j=0;j<e;j++){
            C[i][j]=A[i][j];
        }
    }
}
void bfs(int org1, int org2){
    int i,j;
    int f=0;
    int r=0;
    for(i=0;i<n;i++){
        for(j=0;j<e;j++){
            vt[i][j]=0; ///초기화
        }
    }
    //vt[org1][org2]=1; ///시작점
    q[r].x = org1;
    q[r].y = org2;
    r++;

    do{
        //tr(); ///C배열을 A배열에 임시 저장 ---> 한번에 다 녹는것 방지
        save=q[f++];
        if(save.x+1<n && vt[save.x+1][save.y]==0 && C[save.x+1][save.y]==0){
            q[r].x = save.x+1;
            q[r].y = save.y;
            r++;
            A[save.x+1][save.y]=1;
            vt[save.x+1][save.y]=1;

        }
        if(save.x-1>0 && vt[save.x-1][save.y]==0 && C[save.x-1][save.y]==0){
            q[r].x = save.x-1;
            q[r].y = save.y;
            r++;
            A[save.x-1][save.y]=1;
            vt[save.x-1][save.y]=1;

        }
        if(save.y+1<e && vt[save.x][save.y+1]==0 && C[save.x][save.y+1]==0){
            q[r].x = save.x;
            q[r].y = save.y+1;
            r++;
            A[save.x][save.y+1]=1;
            vt[save.x][save.y+1]=1;

        }
        if(save.y-1>0 && vt[save.x][save.y-1]==0 && C[save.x][save.y-1]==0){
            q[r].x = save.x;
            q[r].y = save.y-1;
            r++;
            A[save.x][save.y-1]=1;
            vt[save.x][save.y-1]=1;

        }
        //tr2(); ///C 배열로 다시 가져오기
    }while(f!=r);
    //print();
    check();
    //q_print();
}
int main(){
    input();
    int i,j;
    int cnt=0;
    int cheese_cnt=0; ///마지막에 남은 치즈 개수
    int count_=0; ///다 녹는 시간
    while(1){
        cnt=C_check();
        if(cnt==0){
            break;
        }
        cheese_cnt=cnt; ///다 녹기전의 치즈 개수
        count_++;
        bfs(0,0);

    }
    printf("%d\n%d\n",count_,cheese_cnt);
    return 0;
}
